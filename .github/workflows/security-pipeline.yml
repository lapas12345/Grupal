name: Shift-Left Security Pipeline with SonarQube

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  security-analysis:
    name: Security Analysis & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout del c√≥digo fuente
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      # 2. Configuraci√≥n del entorno Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # 3. Cache de dependencias para mejorar performance
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # 4. Instalaci√≥n de dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # 5. An√°lisis est√°tico con Flake8 (linting)
      - name: Run Flake8 (Code Linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      
      # 6. An√°lisis de seguridad con Bandit
      - name: Run Bandit (Security Analysis)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
      
      # 7. Verificaci√≥n de vulnerabilidades en dependencias
      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check
      
      # 8. Ejecutar tests con cobertura
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
        continue-on-error: true
      
      # 9. Configuraci√≥n de Java para SonarQube
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      # 10. Cache de SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      # 11. An√°lisis con SonarQube
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
      
      # 12. Ejecutar SonarQube Scanner
      - name: Run SonarQube Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=shift-left-security-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.python.bandit.reportPaths=bandit-report.json \
            -Dsonar.exclusions=**/tests/**,**/venv/**,**/__pycache__/**
      
      # 13. Quality Gate check
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # 14. Subir artefactos de reportes
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            coverage.xml
            htmlcov/
      
      # 15. Comentario en PR con resultados
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîí **Shift-Left Security Analysis Completed**\n\n' +
                    '‚úÖ Static code analysis with Flake8\n' +
                    '‚úÖ Security scan with Bandit\n' +
                    '‚úÖ Dependency vulnerability check with Safety\n' +
                    '‚úÖ SonarQube quality analysis\n\n' +
                    'Please review the security reports in the Actions tab.'
            })

  # Job adicional para deployment solo si pasa el quality gate
  deploy:
    name: Deploy (if security checks pass)
    needs: security-analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Deployment placeholder
        run: |
          echo "üöÄ Deploying to production..."
          echo "Security checks passed - safe to deploy!"
          # Aqu√≠ ir√≠an los pasos reales de deployment
